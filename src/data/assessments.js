// Centralized assessments data with 10+ questions each

const assessments = [
  {
    id: 1,
    title: "JavaScript Basics",
    description: "Test your knowledge of JavaScript fundamentals including variables, scope, closures, and arrays.",
    duration: "20 minutes",
    difficulty: "Beginner",
    color: "#3B82F6",
    questions: [
      { id: 1, question: "Which keyword declares a block-scoped variable?", options: ["var", "let", "function", "const var"], correct: 1 },
      { id: 2, question: "What is closure in JavaScript?", options: ["A function bundled with its lexical scope", "A way to close the browser", "A module loader", "A class inheritance pattern"], correct: 0 },
      { id: 3, question: "Which method converts JSON string to object?", options: ["JSON.parse", "JSON.toObject", "JSON.stringify", "Object.parse"], correct: 0 },
      { id: 4, question: "What does Array.prototype.map return?", options: ["A new array", "The same array", "A number", "An object"], correct: 0 },
      { id: 5, question: "How to check if value is NaN?", options: ["value === NaN", "Number.isNaN(value)", "isNumber(value)", "parseInt(value)"], correct: 1 },
      { id: 6, question: "Which is NOT a primitive?", options: ["string", "number", "object", "boolean"], correct: 2 },
      { id: 7, question: "What does '===' do?", options: ["Loose equality", "Assignment", "Strict equality", "Type coercion"], correct: 2 },
      { id: 8, question: "Promise.all rejects when?", options: ["All resolve", "Any rejects", "Half resolve", "Timeout"], correct: 1 },
      { id: 9, question: "Default value syntax in params?", options: ["function f(a?=1)", "function f(a=1)", "function f(?a=1)", "function f(a:=1)"], correct: 1 },
      { id: 10, question: "Which creates a shallow copy of array?", options: ["arr.copy()", "arr.map(x=>x)", "arr.slice()", "copy(arr)"], correct: 2 },
      { id: 11, question: "typeof null is?", options: ["null", "object", "undefined", "symbol"], correct: 1 },
    ],
  },
  {
    id: 2,
    title: "React Fundamentals",
    description: "Core React, hooks, component patterns, and rendering performance.",
    duration: "30 minutes",
    difficulty: "Intermediate",
    color: "#6366F1",
    questions: [
      { id: 1, question: "What is JSX?", options: ["Templating language", "Syntax extension for JS", "HTML in JS engine", "A CSS preprocessor"], correct: 1 },
      { id: 2, question: "Which hook manages state?", options: ["useMemo", "useState", "useEffect", "useRef"], correct: 1 },
      { id: 3, question: "Key prop is used for?", options: ["Styling", "Optimizing list rendering", "Event binding", "Refs"], correct: 1 },
      { id: 4, question: "Side effects go in?", options: ["useState", "useEffect", "useMemo", "useReducer"], correct: 1 },
      { id: 5, question: "Context provides?", options: ["Global state", "Routing", "Animations", "Bundling"], correct: 0 },
      { id: 6, question: "Which prevents unnecessary re-renders?", options: ["React.lazy", "memo", "useId", "StrictMode"], correct: 1 },
      { id: 7, question: "Which is valid state update?", options: ["state.count++", "setCount(c=>c+1)", "count = count+1", "this.count++"], correct: 1 },
      { id: 8, question: "What does useRef persist?", options: ["Mutable value across renders", "Re-render count", "Props", "Context"], correct: 0 },
      { id: 9, question: "React Router hook for params?", options: ["useHistory", "useParams", "useRoute", "useMatchParams"], correct: 1 },
      { id: 10, question: "Suspense is for?", options: ["Styling", "Data fetching/Code splitting", "Testing", "Security"], correct: 1 },
      { id: 11, question: "Keys should be?", options: ["Index always", "Stable unique id", "Random", "Title"], correct: 1 },
    ],
  },
  {
    id: 3,
    title: "Data Structures & Algorithms",
    description: "Essential data structures, algorithmic paradigms, and complexity analysis.",
    duration: "45 minutes",
    difficulty: "Advanced",
    color: "#F59E0B",
    questions: [
      { id: 1, question: "Binary search time complexity?", options: ["O(n)", "O(log n)", "O(n^2)", "O(1)"], correct: 1 },
      { id: 2, question: "Stable sorting example?", options: ["QuickSort", "HeapSort", "MergeSort", "SelectionSort"], correct: 2 },
      { id: 3, question: "Hash table collision handling?", options: ["Probing", "Recursion", "Backtracking", "Branching"], correct: 0 },
      { id: 4, question: "Balanced BST example?", options: ["AVL", "Trie", "Heap", "Queue"], correct: 0 },
      { id: 5, question: "Graph traversal using queue?", options: ["DFS", "BFS", "Dijkstra", "Kruskal"], correct: 1 },
      { id: 6, question: "Dijkstra finds?", options: ["MST", "Shortest path", "Topological order", "Components"], correct: 1 },
      { id: 7, question: "Trie stores?", options: ["Numbers", "Strings/prefixes", "Graphs", "Matrices"], correct: 1 },
      { id: 8, question: "Heap property ensures?", options: ["Sorted array", "Parent order invariant", "Binary searchability", "Uniqueness"], correct: 1 },
      { id: 9, question: "Amortized for dynamic array push?", options: ["O(1)", "O(log n)", "O(n)", "O(n log n)"], correct: 0 },
      { id: 10, question: "Topological sort applies to?", options: ["Undirected", "Cyclic", "DAG", "Complete graph"], correct: 2 },
      { id: 11, question: "Union-Find supports?", options: ["Insert/Delete", "Union/Find sets", "Sort", "Traverse"], correct: 1 },
    ],
  },
  {
    id: 4,
    title: "System Design Principles",
    description: "Design scalable, resilient systems. Caching, queues, replication, and consistency.",
    duration: "60 minutes",
    difficulty: "Expert",
    color: "#EF4444",
    questions: [
      { id: 1, question: "CAP stands for?", options: ["Consistency, Availability, Partition tolerance", "Cache, API, Performance", "Code, Architecture, Platform", "Client, App, Protocol"], correct: 0 },
      { id: 2, question: "Scale reads using?", options: ["Sharding", "Read replicas", "Queues", "Cron"], correct: 1 },
      { id: 3, question: "CDN primarily reduces?", options: ["Latency", "Cost", "Consistency", "Bandwidth"], correct: 0 },
      { id: 4, question: "Idempotent HTTP method?", options: ["POST", "PATCH", "PUT", "CONNECT"], correct: 2 },
      { id: 5, question: "Message queue decouples?", options: ["DBs", "Services", "Caches", "Browsers"], correct: 1 },
      { id: 6, question: "Rate limiting protects?", options: ["Users", "Servers", "Browsers", "CDN"], correct: 1 },
      { id: 7, question: "Consistent hashing helps with?", options: ["Routing", "Cache distribution", "Compression", "Encryption"], correct: 1 },
      { id: 8, question: "SQL vs NoSQL tradeoff?", options: ["ACID vs schema", "ACID vs BASE", "Joins vs indexes", "DDL vs DML"], correct: 1 },
      { id: 9, question: "Blue/Green does?", options: ["A/B testing", "Zero-downtime deploys", "Rollback DB", "Cache warming"], correct: 1 },
      { id: 10, question: "Circuit breaker prevents?", options: ["Memory leak", "Cascade failures", "Deadlocks", "GC pauses"], correct: 1 },
      { id: 11, question: "Caching improves?", options: ["Consistency", "Latency & throughput", "Data freshness", "Storage"], correct: 1 },
    ],
  },
];

export default assessments;


